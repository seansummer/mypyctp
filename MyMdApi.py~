# -*- coding: utf-8 -*-

import hashlib, os, sys, tempfile, time
from ctp import ApiStruct, MdApi, TraderApi

class MyMdApi(MdApi):
#初始化MyMdApi类
    def __init__(self, brokerID, userID, password, instrumentIDs):
        self.requestID = 0
        self.brokerID = brokerID
        self.userID = userID
        self.password = password
        self.instrumentIDs = instrumentIDs
        self.Create()

#创建MdApi
#@param pszFlowPath 存贮订阅信息文件的目录，默认为当前目录
#@return 创建出的UserApi
#modify for udp marketdata
    def Create(self):
        MdApi.Create(self)

#注册前置机网络地址
#@param pszFrontAddress：前置机网络地址。
#@remark 网络地址的格式为：“protocol://ipaddress:port”，如：”tcp://127.0.0.1:17001”。
#@remark “tcp”代表传输协议，“127.0.0.1”代表服务器地址。”17001”代表服务器端口号。'''
    def RegisterFront(self, front):
        if isinstance(front, bytes):
            return MdApi.RegisterFront(self, front)
        for front in front:
            MdApi.RegisterFront(self, front)

#当客户端与交易后台建立起通信连接时（还未登录前），该方法被调用。
    def OnFrontConnected(self):
        print('OnFrontConnected: 登录中...')
        req = ApiStruct.ReqUserLogin(BrokerID=self.brokerID, UserID=self.userID, Password=self.password)
        self.requestID += 1
        self.ReqUserLogin(req, self.requestID)

#当客户端与交易后台通信连接断开时，该方法被调用。当发生这个情况后，API会自动重新连接，客户端可不做处理。
#@param nReason 错误原因
#        0x1001 网络读失败
#        0x1002 网络写失败
#        0x2001 接收心跳超时
#        0x2002 发送心跳失败
#        0x2003 收到错误报文
    def OnFrontDisconnected(self, nReason):
        print('OnFrontDisconnected:', nReason)

#心跳超时警告。当长时间未收到报文时，该方法被调用。
#@param nTimeLapse 距离上次接收报文的时间
    def OnHeartBeatWarning(self, nTimeLapse):
        print('OnHeartBeatWarning:', nTimeLapse)

    def OnRspUserLogin(self, pRspUserLogin, pRspInfo, nRequestID, bIsLast):
        print('OnRspUserLogin:', pRspInfo)
        if pRspInfo.ErrorID == 0: # Success
            print('GetTradingDay:', self.GetTradingDay())
            self.SubscribeMarketData(self.instrumentIDs)

    def OnRspSubMarketData(self, pSpecificInstrument, pRspInfo, nRequestID, bIsLast):
        print('OnRspSubMarketData:', pRspInfo)

    def OnRspUnSubMarketData(self, pSpecificInstrument, pRspInfo, nRequestID, bIsLast):
        print('OnRspUnSubMarketData:', pRspInfo)

    def OnRspError(self, pRspInfo, nRequestID, bIsLast):
        print('OnRspError:', pRspInfo)

    def OnRspUserLogout(self, pUserLogout, pRspInfo, nRequestID, bIsLast):
        print('OnRspUserLogout:', pRspInfo)

    def OnRtnDepthMarketData(self, pDepthMarketData):
        d = pDepthMarketData
        print(d.TradingDay, d.InstrumentID, d.LastPrice, d.HighestPrice, d.LowestPrice, d.Volume, d.OpenInterest, d.UpdateTime, d.UpdateMillisec, d.AveragePrice)
        f = open('mdlog.txt','a')
        f.write(str(d)+'\n')
        f.close()

if __name__ == '__main__':
    mdapi = MyMdApi(b'1007', b'00000581', b'123456', [b'cu1309'])
    mdapi.RegisterFront(b'tcp://27.115.78.150:26213')
    mdapi.Init()

    try:
        while 1:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
